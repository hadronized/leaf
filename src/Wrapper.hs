{-# LANGUAGE OverloadedStrings #-}

module Wrapper where

import Control.Monad
import Data.List (intercalate)
import Data.List.Split
import Leaf.String
import System.Directory (doesFileExist)
import System.IO
import Text.Blaze.Html as B
import Text.Blaze.Html5 as H
import Text.Blaze.Html5.Attributes as A

-- construct a simple name with intercalated nick
prettyName :: (String,String,String) -> String
prettyName (f,l,n) = intercalate (" '" ++ n ++ "' ") [f,l]

-- take the first name, the last name and the nick of the portfolio, then
-- the slogan, and make a header like this below:
--
-- Dimitri 'skp' Sabadie
--       Hello, world!
header :: String -> String -> Html
header fln s = H.div ! A.id "wrapper_header" $ titleElem >> slogElem
    where titleElem  = h1 ! A.id "wrapper_header_title" $ toHtml fln
          slogElem   = h2 ! A.id "wrapper_header_slogan" $ toHtml s


-- take the name of the porfolio, the range year and make a footer
footer :: String -> Int -> Maybe Int -> Html
footer fln start rangeEnd = H.footer ! A.id "wrapper_footer" $ copyright >> generator
  where copyright  = h4 ! A.id "wrapper_footer_copyright" $ toHtml ("(C) " ++ fln ++ ", (" ++ show start ++ maybeRange ++ ")")
        generator  = p ! A.id "wrapper_footer_generator" $ toHtml ("Generated by Leaf." :: String)
        maybeRange = case rangeEnd of
                       Just end -> "-" ++ show end
                       _        -> ""

-- make a navbar
navbar :: [Html] -> Html
navbar links = nav ! A.id "wrapper_navbar" $ (ul lis)
  where lis = foldl (\acc x -> acc >> (li ! class_ "wrapper_navbar_item" $ x)) (return ()) links

-- a wrapper is a actually a function that takes a list of
-- elements, representing the per-page content, and makes the below
-- list:
--   header : navbar : concat content : footer
-- it also generates the head and body elements
wrapper :: Html -> Html -> Html -> String -> Html -> Html
wrapper h f n t c = docTypeHtml $ headElem >> bodyElem
  where headElem  = H.head $ metaElem >> linkElem >> titleElem
        metaElem  = meta ! charset "utf-8"
        linkElem  = link ! href "default.css" ! type_ "text/css" ! rel "stylesheet"
        titleElem = H.title $ toHtml t
        bodyElem  = body ! A.id "wrapper" $ h >> n >> content >> f
        content   = H.div ! A.id "wrapper_content" $ c